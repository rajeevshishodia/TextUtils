{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","onChange","event","console","log","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Components_Navbar","body","Components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.d9cd7858.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\r\n      aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n              Home\r\n            </a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">\r\n              {props.aboutText}\r\n            </Link>\r\n          </li> */}\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input\r\n            className=\"form-control me-2\"\r\n            type=\"search\"\r\n            placeholder=\"Search\"\r\n            aria-label=\"Search\"\r\n          />\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n\r\nNavbar.propTypes= {title:PropTypes.string.isRequired,aboutText:PropTypes.string.isRequired}\r\nNavbar.defaultProps={title:\"Set Title here\",aboutText:\"About\"}","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick=()=>{\r\n    // console.log(\"UpperCase was Clicked\");\r\n    // setText(\"You have clicked on UpClick\");\r\n    let newText=text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"converted to uppercase\",\"success\");\r\n  }\r\n  const handleLowClick=()=>{\r\n    let newText=text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"converted to lowercase\",\"success\")\r\n  }\r\n  const handleOnChange=(event)=>{\r\n    console.log(\"On change\");\r\n    setText(event.target.value)\r\n  }\r\n  const clearText=(event)=>{\r\n    let newText=\"\";\r\n    setText(newText)\r\n    props.showAlert(\"Text is cleared\",\"success\");\r\n  }\r\n  \r\n  // Copy text\r\n  const handleCopy=()=>{\r\n    var text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Copied!!\",\"success\");\r\n  }\r\n  // Remove extra spaces\r\n  const handleExtraSpaces=()=>{\r\n     let newText=text.split(/[ ]+/);\r\n     setText(newText.join(\" \"))\r\n     props.showAlert(\"extra spaces removed\",\"success\");\r\n  }\r\n  // state variable\r\n  const [text, setText] = useState('');\r\n  // text=\"new text\" wrong way\r\n  // setText(\"New Text\"); // correct way to change\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'#042743'}} value={text} id=\"myBox\" rows=\"8\" ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} >Convert to UPPERCASE</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to lowercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={clearText}>Clear text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Text</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h2>Your Text Summary</h2>\r\n      <p>{text.split(\" \").length} words , {text.length} characters</p>\r\n      <p>{0.008*text.split(\" \").length} Min require to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something in text box to preview \"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n  const capitalize=(word)=>{\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    \r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n   \r\n  )\r\n}\r\n\r\nexport default Alert\r\n\r\n","import React,{useState} from 'react'\nimport \"./App.css\";\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import About from './Components/About';\nimport Alert from './Components/Alert';\n// import {BrowserRouter,Routes,Route} from 'react-router-dom'\nfunction App() {\n  const [mode,setMode]=useState('light');//whether dark mode is enabled or not\n  const [alert,setAlert]=useState(null);\n  const showAlert=(message,type)=>{\n       setAlert({msg:message,type:type});\n       setTimeout(()=>{\n        setAlert(null);\n       },2000);\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }\n  }\n  return (\n     <>\n      {/* <BrowserRouter> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* <Routes>\n          <Route path='/about' exact element={<About/>}></Route> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n        {/* </Routes> */}\n      </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}